commit 2493ca9d1ed0f66659ca360388d59229993954da
Author: Ryan Burns <rtburns@jpl.nasa.gov>
Date:   Fri Sep 17 17:33:04 2021 -0700

    Fix build with Eigen 3.4.0
    
    Eigen 3.4.0 is here!
    https://eigen.tuxfamily.org/index.php?title=3.4#Changes_that_might_break_existing_code
    
    * Make DenseMatrix's initializer_list constructor explicit to match the
      corresponding constructor added in Eigen 3.4.0, and guard it to avoid
      an ambiguous overloaded constructor
    * Fix instances of float/double matrix indexing

diff --git a/cxx/isce3/core/DenseMatrix.h b/cxx/isce3/core/DenseMatrix.h
index 3556692a..5b795629 100644
--- a/cxx/isce3/core/DenseMatrix.h
+++ b/cxx/isce3/core/DenseMatrix.h
@@ -33,7 +33,9 @@ public:
         return *this * other;
     }
 
-    CUDA_HOSTDEV constexpr DenseMatrix(
+// Backport Eigen 3.4.0's initializer_list constructor
+#if !EIGEN_VERSION_AT_LEAST(3, 4, 0)
+    CUDA_HOSTDEV explicit constexpr DenseMatrix(
             std::initializer_list<std::initializer_list<T>> lst) {
         int i = 0, j = 0;
         for (const auto& l : lst) {
@@ -43,6 +45,7 @@ public:
             i++, j = 0;
         }
     }
+#endif
 
     /** Matrix transposition */
     CUDA_HOSTDEV constexpr DenseMatrix<N, T> transpose() const {
diff --git a/cxx/isce3/core/Pegtrans.cpp b/cxx/isce3/core/Pegtrans.cpp
index 24417707..d05525b8 100644
--- a/cxx/isce3/core/Pegtrans.cpp
+++ b/cxx/isce3/core/Pegtrans.cpp
@@ -99,7 +99,7 @@ void Pegtrans::SCHbasis(const cartesian_t &sch, cartmat_t &,
     /*
      * Computes the transformation matrix from xyz to a local sch frame
      */
-    cartmat_t matschxyzp = {{{-sin(sch[0]/radcur),
+    cartmat_t matschxyzp   {{{-sin(sch[0]/radcur),
                              -(sin(sch[1]/radcur) * cos(sch[0]/radcur)),
                              cos(sch[0]/radcur) * cos(sch[1]/radcur)},
                             {cos(sch[0]/radcur),
diff --git a/cxx/isce3/geocode/GeocodeCov.cpp b/cxx/isce3/geocode/GeocodeCov.cpp
index 7528b2b6..c7c3d7d7 100644
--- a/cxx/isce3/geocode/GeocodeCov.cpp
+++ b/cxx/isce3/geocode/GeocodeCov.cpp
@@ -769,7 +769,7 @@ inline void Geocode<T>::_interpolate(
 
         if (flag_apply_rtc) {
             float rtc_value =
-                    rtc_area(rdrY + azimuthFirstLine, rdrX + rangeFirstPixel);
+                    rtc_area(int(rdrY + azimuthFirstLine), int(rdrX + rangeFirstPixel));
             val /= std::sqrt(rtc_value);
             if (out_geo_rtc != nullptr) {
 #pragma omp atomic write
@@ -818,7 +818,7 @@ inline void Geocode<T>::_interpolate(
 
         if (phase_screen_raster != nullptr) {
             phase -= phase_screen_array(
-                    rdrY + azimuthFirstLine, rdrX + rangeFirstPixel);
+                    int(rdrY + azimuthFirstLine), int(rdrX + rangeFirstPixel));
         }
 
         T_out cpxPhase;
diff --git a/tests/cxx/isce3/core/attitude/attitude.cpp b/tests/cxx/isce3/core/attitude/attitude.cpp
index b4681245..21b8adb9 100644
--- a/tests/cxx/isce3/core/attitude/attitude.cpp
+++ b/tests/cxx/isce3/core/attitude/attitude.cpp
@@ -38,9 +38,9 @@ protected:
         attitude = Attitude(time, quaternions, epoch);
 
         // Define the reference rotation matrix (YPR)
-        R_ypr_ref = {{{0.993760669166, -0.104299329454, 0.039514330251},
-                      {0.099708650872, 0.989535160981, 0.104299329454},
-                      {-0.049979169271, -0.099708650872, 0.993760669166}}};
+        R_ypr_ref = cartmat_t{{{0.993760669166, -0.104299329454, 0.039514330251},
+                               {0.099708650872, 0.989535160981, 0.104299329454},
+                               {-0.049979169271, -0.099708650872, 0.993760669166}}};
 
         // Set tolerance
         tol = 1.0e-10;
